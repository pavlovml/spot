#! /usr/bin/env python

# --------------------------------------------------------
# Fast R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick
# --------------------------------------------------------

"""Train a Fast R-CNN network on a region of interest database."""

from spot.fast_rcnn.train import get_training_roidb, train_net
from spot.fast_rcnn.config import cfg, get_output_dir
from spot.datasets import OMF
from argparse import ArgumentParser

import caffe
import pprint
import numpy as np
import sys

def parse_args():
    """Parse input arguments"""
    parser = ArgumentParser(description='Train a Faster R-CNN network')

    parser.add_argument('-g', '--gpu', dest='gpu',
                        help='GPU device id to use',
                        default=0, type=int)

    parser.add_argument('-i', '--iterations', dest='iterations',
                        help='number of iterations to train',
                        default=40000, type=int)

    parser.add_argument('-s', '--seed', dest='seed',
                        help='fixed RNG seed',
                        default=None, type=int)

    parser.add_argument('model', metavar='model',
                        help='model directory with solver/test/train settings and weights',
                        type=str)

    parser.add_argument('dataset', metavar='DATASET',
                        help='path to training dataset',
                        type=str)

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    cfg.GPU_ID = args.gpu

    print('Called with args:')
    print(args)

    print('Using config:')
    pprint.pprint(cfg)

    return args

def setup_caffe(gpu=0, seed=None):
    """Initializes Caffe's python bindings."""
    if seed:
        np.random.seed(seed)
        caffe.set_random_seed(seed)

    caffe.set_mode_gpu()
    caffe.set_device(gpu)

if __name__ == '__main__':
    args = parse_args()

    setup_caffe(gpu=args.gpu, seed=args.seed)

    dataset = OMF(args.dataset)
    print 'Loaded dataset `{:s}` for training'.format(dataset.name)

    roidb = get_training_roidb(dataset)
    print 'Loaded {:d} training examples'.format(len(roidb))

    output_dir = get_output_dir(dataset, None)
    print 'Output will be saved to `{:s}`'.format(output_dir)

    solver = '{:s}/solver.prototxt'.format(args.model)
    weights = '{:s}/weights.caffemodel'.format(args.model)

    train_net(solver, roidb, output_dir,
              pretrained_model=weights,
              max_iters=args.iterations)
